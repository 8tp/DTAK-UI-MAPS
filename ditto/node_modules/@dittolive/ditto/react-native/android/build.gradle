import groovy.json.JsonSlurper

buildscript {
  ext.getExtOrDefault = {name ->
    return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["rnsdk_" + name]
  }

  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:8.7.2"
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${getExtOrDefault('kotlinVersion')}"
  }
}

def reactNativeArchitectures() {
  def value = rootProject.getProperties().get("reactNativeArchitectures")
  return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"


def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["rnsdk_" + name]).toInteger()
}

def supportsNamespace() {
  def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
  def major = parsed[0].toInteger()
  def minor = parsed[1].toInteger()

  // Namespace support was added in 7.3.0
  return (major == 7 && minor >= 3) || major >= 8
}

android {
  if (supportsNamespace()) {
    namespace "com.dittolive.rnsdk"

    sourceSets {
      main {
        manifest.srcFile "src/main/AndroidManifestNew.xml"
      }
    }
  }

  // ESSENTIAL for adding JSI
  buildFeatures {
    prefab true
  }

  ndkVersion getExtOrDefault("ndkVersion")
  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")

    externalNativeBuild {
      cmake {
        cppFlags "-frtti -fexceptions -Wall -fstack-protector-all"
        arguments "-DANDROID_STL=c++_shared"
        abiFilters (*reactNativeArchitectures())
      
        buildTypes {
          debug {
            cppFlags "-O1 -g"
          }
          release {
            cppFlags "-O2"
          }
        }
      }
    }
  }

  externalNativeBuild {
    cmake {
      path "CMakeLists.txt"
    }
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

repositories {
  mavenCentral()
  google()
}

def kotlin_version = getExtOrDefault("kotlinVersion")

def getVersionFromPackageJson() {
  def packageJsonPath = file('../../package.json')
  if (packageJsonPath.exists()) {
      def packageJson = new JsonSlurper().parse(packageJsonPath)
      return packageJson.version
  } else {
      throw new FileNotFoundException("package.json not found at: ${packageJsonPath}")
  }
}

project.version = getVersionFromPackageJson()

dependencies {
  implementation "com.facebook.react:react-android"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

  def aarFile = file('dittoffi/aar/ditto.aar')
  def aarExists = aarFile.exists()

  if (aarExists) {
      println "Using local `ditto.aar`."
      implementation files('dittoffi/aar/ditto.aar')
  } else {
      println "Using remote `live.ditto:ditto:${project.version}`"
      implementation "live.ditto:ditto:${project.version}"
  }
}

tasks.register('downloadBinaries') {
  doLast {
    def defaultArchitectures = ['arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64']

    defaultArchitectures.each { arch ->
      def fileUrl = "https://software.ditto.live/react-native/ditto/${project.version}/android/${arch}/libdittoffi.so"

      new File("${project.projectDir}/dittoffi/libs/${arch}").mkdirs()
      def localFilePath = "${project.projectDir}/dittoffi/libs/${arch}/libdittoffi.so"

      if (!new File(localFilePath).exists()) {
        println "Downloading file for $arch: $fileUrl"
        ant.get(src: fileUrl, dest: localFilePath, verbose: true)
      } else {
        println "File for $arch already exists, skipping download: $localFilePath"
      }
    }
  }
}
preBuild.dependsOn downloadBinaries
