/* File: dittoffi_java.i */
%module(directors="1") dittoffi

%{
#ifdef __ANDROID__
#include <android/log.h>
#endif
%}

// `%include`s mean that SWIG processes the files and generates wrapper and
// proxy classes as appropriate for the types it encounters.
%{
#include "logger_cb.h"
#include "logger_export.h"
#include "ditto_transaction.h"
%}
// 🐉🐉
// Make sure to have this `%include` before that of dependent classes.
// SWIG won't directly error if you don't, but things will nonetheless
// break at runtime, which gets very hard to debug and diagnose. Fun™
// 🐉🐉
%include "retainable.h"
%include "logger_cb.h"
%include "logger_export.h"
%include "ditto_transaction.h"
%include "dittomesh_java.i"
%include "dittostore_java.i"
extern "C" {
  %include "dittoffi.h"
}

// imports
// http://www.swig.org/Doc4.0/Java.html#Java_imclass_pragmas
%pragma(java) jniclassimports=%{
import live.ditto.internal.NativeLibraryLoader;
%}

// class dittoffiJNI {
%pragma(java) jniclasscode=%{
  static {
    NativeLibraryLoader loader = new NativeLibraryLoader();
    loader.loadDitto();
  }
%}
