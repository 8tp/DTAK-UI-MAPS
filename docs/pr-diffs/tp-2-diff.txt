diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 00000000..66652e82
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,3 @@
+{
+  "chatgpt.openOnStartup": false
+}
\ No newline at end of file
diff --git a/dTAK/app/_layout.tsx b/dTAK/app/_layout.tsx
index 305b9ed2..c336a403 100644
--- a/dTAK/app/_layout.tsx
+++ b/dTAK/app/_layout.tsx
@@ -4,20 +4,26 @@ import "react-native-reanimated";
 import "react-native-get-random-values";
 import { ConnectivityProvider } from "../features/connectivity";
 import { FeatureDeletionProvider } from "../features/map/hooks/useFeatureDeletion";
+import { CameraSessionProvider } from "../src/features/camera/CameraSessionContext";
 
 export default function RootLayout() {
 	return (
 		<FeatureDeletionProvider>
-			<ConnectivityProvider>
-				<GestureHandlerRootView style={{ flex: 1 }}>
-					<Stack
-						screenOptions={{
-							headerShown: false,
-						}}>
-						<Stack.Screen name="index" />
-					</Stack>
-				</GestureHandlerRootView>
-			</ConnectivityProvider>
+			<CameraSessionProvider>
+				<ConnectivityProvider>
+					<GestureHandlerRootView style={{ flex: 1 }}>
+						<Stack
+							screenOptions={{
+								headerShown: false,
+							}}>
+							<Stack.Screen name="index" />
+							<Stack.Screen name="camera/index" />
+							<Stack.Screen name="camera/preview" />
+							<Stack.Screen name="camera/edit" />
+						</Stack>
+					</GestureHandlerRootView>
+				</ConnectivityProvider>
+			</CameraSessionProvider>
 		</FeatureDeletionProvider>
 	);
 }
diff --git a/dTAK/app/camera/edit.tsx b/dTAK/app/camera/edit.tsx
new file mode 100644
index 00000000..22434147
--- /dev/null
+++ b/dTAK/app/camera/edit.tsx
@@ -0,0 +1,545 @@
+import { useRouter } from "expo-router";
+import { SaveFormat, manipulateAsync } from "expo-image-manipulator";
+import * as MediaLibrary from "expo-media-library";
+import React, { useCallback, useEffect, useMemo, useRef, useState } from "react";
+import {
+  Alert,
+  GestureResponderEvent,
+  LayoutChangeEvent,
+  Modal,
+  SafeAreaView,
+  StyleSheet,
+  Text,
+  TextInput,
+  TouchableOpacity,
+  View,
+} from "react-native";
+import { Image } from "expo-image";
+import ViewShot from "react-native-view-shot";
+import Svg, { Circle, Line, Path, Text as SvgText } from "react-native-svg";
+
+import { useCameraSession } from "../../src/features/camera/CameraSessionContext";
+import { normalizePoint, denormalizePoint } from "../../src/features/camera/annotationUtils";
+import { Annotation, NormalizedPoint } from "../../src/features/camera/types";
+
+const createId = () => `${Date.now()}-${Math.round(Math.random() * 1_000_000)}`;
+
+const DEFAULT_COLOR = "#f97316";
+const MAX_WIDTH = 1600;
+
+const CameraEditScreen = () => {
+  const router = useRouter();
+  const viewShotRef = useRef<ViewShot | null>(null);
+  const { capturedPhoto, annotations, addAnnotation, setAnnotations, undoLastAnnotation } = useCameraSession();
+  const [canvasSize, setCanvasSize] = useState<{ width: number; height: number } | null>(null);
+  const [activeTool, setActiveTool] = useState<"circle" | "arrow" | "text">("circle");
+  const [pendingPoint, setPendingPoint] = useState<NormalizedPoint | null>(null);
+  const [textModalVisible, setTextModalVisible] = useState(false);
+  const [textDraft, setTextDraft] = useState("");
+  const [isSaving, setIsSaving] = useState(false);
+  const captureFileName = useMemo(() => `dtak-annotated-${Date.now()}`, []);
+  const instructionText = useMemo(() => {
+    if (activeTool === "circle") {
+      return pendingPoint ? "Tap again to set circle radius" : "Tap photo to choose circle center";
+    }
+
+    if (activeTool === "arrow") {
+      return pendingPoint ? "Tap again to place arrow head" : "Tap photo to start arrow";
+    }
+
+    return "Tap photo to position text";
+  }, [activeTool, pendingPoint]);
+
+  useEffect(() => {
+    if (!capturedPhoto) {
+      router.replace("/camera" as never);
+    }
+  }, [capturedPhoto, router]);
+
+  const handleLayout = (event: LayoutChangeEvent) => {
+    const { width, height } = event.nativeEvent.layout;
+    setCanvasSize({ width, height });
+  };
+
+  const handleCanvasPress = useCallback(
+    (event: GestureResponderEvent) => {
+      if (!canvasSize || !capturedPhoto) {
+        return;
+      }
+
+      const { locationX, locationY } = event.nativeEvent;
+      const normalized = normalizePoint({ x: locationX, y: locationY }, canvasSize);
+
+      if (activeTool === "text") {
+        setPendingPoint(normalized);
+        setTextDraft("");
+        setTextModalVisible(true);
+        return;
+      }
+
+      if (!pendingPoint) {
+        setPendingPoint(normalized);
+        return;
+      }
+
+      if (activeTool === "circle") {
+        addAnnotation({
+          id: createId(),
+          type: "circle",
+          center: pendingPoint,
+          edge: normalized,
+          color: DEFAULT_COLOR,
+        });
+        setPendingPoint(null);
+        return;
+      }
+
+      if (activeTool === "arrow") {
+        addAnnotation({
+          id: createId(),
+          type: "arrow",
+          start: pendingPoint,
+          end: normalized,
+          color: DEFAULT_COLOR,
+        });
+        setPendingPoint(null);
+        return;
+      }
+    },
+    [activeTool, addAnnotation, canvasSize, capturedPhoto, pendingPoint]
+  );
+
+  const confirmText = () => {
+    if (!pendingPoint || textDraft.trim().length === 0) {
+      setTextModalVisible(false);
+      setPendingPoint(null);
+      return;
+    }
+
+    addAnnotation({
+      id: createId(),
+      type: "text",
+      point: pendingPoint,
+      text: textDraft.trim(),
+      color: DEFAULT_COLOR,
+    });
+    setTextModalVisible(false);
+    setPendingPoint(null);
+  };
+
+  const cancelText = () => {
+    setTextModalVisible(false);
+    setPendingPoint(null);
+  };
+
+  const buildArrowHeadPath = useCallback((startPx: NormalizedPoint, endPx: NormalizedPoint) => {
+    if (!canvasSize) {
+      return "";
+    }
+
+    const start = denormalizePoint(startPx, canvasSize);
+    const end = denormalizePoint(endPx, canvasSize);
+    const angle = Math.atan2(end.y - start.y, end.x - start.x);
+    const arrowLength = 24;
+    const arrowWidth = 12;
+
+    const pathPoint1 = {
+      x: end.x - arrowLength * Math.cos(angle - Math.PI / 6),
+      y: end.y - arrowLength * Math.sin(angle - Math.PI / 6),
+    };
+    const pathPoint2 = {
+      x: end.x - arrowLength * Math.cos(angle + Math.PI / 6),
+      y: end.y - arrowLength * Math.sin(angle + Math.PI / 6),
+    };
+
+    return `M ${end.x} ${end.y} L ${pathPoint1.x} ${pathPoint1.y} L ${pathPoint2.x} ${pathPoint2.y} Z`;
+  }, [canvasSize]);
+
+  const renderAnnotation = useCallback(
+    (annotation: Annotation) => {
+      if (!canvasSize) {
+        return null;
+      }
+
+      if (annotation.type === "circle") {
+        const center = denormalizePoint(annotation.center, canvasSize);
+        const edge = denormalizePoint(annotation.edge, canvasSize);
+        const radius = Math.hypot(edge.x - center.x, edge.y - center.y);
+
+        return (
+          <Circle
+            key={annotation.id}
+            cx={center.x}
+            cy={center.y}
+            r={radius}
+            stroke={annotation.color}
+            strokeWidth={4}
+            fill="transparent"
+          />
+        );
+      }
+
+      if (annotation.type === "arrow") {
+        const start = denormalizePoint(annotation.start, canvasSize);
+        const end = denormalizePoint(annotation.end, canvasSize);
+        const arrowHeadPath = buildArrowHeadPath(annotation.start, annotation.end);
+
+        return (
+          <React.Fragment key={annotation.id}>
+            <Line
+              x1={start.x}
+              y1={start.y}
+              x2={end.x}
+              y2={end.y}
+              stroke={annotation.color}
+              strokeWidth={4}
+            />
+            <Path d={arrowHeadPath} fill={annotation.color} />
+          </React.Fragment>
+        );
+      }
+
+      if (annotation.type === "text") {
+        const point = denormalizePoint(annotation.point, canvasSize);
+        return (
+          <SvgText
+            key={annotation.id}
+            fill={annotation.color}
+            fontSize={24}
+            fontWeight="bold"
+            stroke="#000000"
+            strokeWidth={0.25}
+            x={point.x}
+            y={point.y}
+          >
+            {annotation.text}
+          </SvgText>
+        );
+      }
+
+      return null;
+    },
+    [buildArrowHeadPath, canvasSize]
+  );
+
+  const handleSave = useCallback(async () => {
+    if (!viewShotRef.current) {
+      return;
+    }
+
+    try {
+      setIsSaving(true);
+      const capturedUri = await viewShotRef.current.capture?.();
+
+      if (!capturedUri) {
+        throw new Error("No image generated");
+      }
+
+      let finalUri = capturedUri;
+      if (canvasSize && canvasSize.width > MAX_WIDTH) {
+        const scale = MAX_WIDTH / canvasSize.width;
+        const resized = await manipulateAsync(
+          capturedUri,
+          [{ resize: { width: MAX_WIDTH, height: Math.round(canvasSize.height * scale) } }],
+          { compress: 0.85, format: SaveFormat.PNG }
+        );
+        finalUri = resized.uri;
+      }
+
+      const permission = await MediaLibrary.requestPermissionsAsync();
+      if (permission.status !== "granted") {
+        Alert.alert("Storage permission required", "Enable photo library access to save annotations.");
+        return;
+      }
+
+      await MediaLibrary.saveToLibraryAsync(finalUri);
+      Alert.alert("Saved", "Annotated photo saved to camera roll.");
+      router.replace("/" as never);
+    } catch (error) {
+      console.error("Failed to save annotated photo", error);
+      Alert.alert("Save failed", "We could not save the annotated image. Try again.");
+    } finally {
+      setIsSaving(false);
+    }
+  }, [canvasSize, router]);
+
+  const undoDisabled = annotations.length === 0;
+
+  const geotagDisplay = useMemo(() => {
+    if (!capturedPhoto?.geolocation) {
+      return "Location unavailable";
+    }
+
+    const { latitude, longitude, accuracy } = capturedPhoto.geolocation;
+    const accuracyText = accuracy ? ` ±${accuracy.toFixed(0)}m` : "";
+    return `Lat ${latitude.toFixed(5)} · Lng ${longitude.toFixed(5)}${accuracyText}`;
+  }, [capturedPhoto]);
+
+  if (!capturedPhoto) {
+    return null;
+  }
+
+  const aspectRatio = capturedPhoto.width && capturedPhoto.height ? capturedPhoto.width / capturedPhoto.height : 4 / 3;
+
+  return (
+    <SafeAreaView style={styles.container}>
+      <View style={styles.header}>
+        <TouchableOpacity onPress={() => router.back()} style={styles.secondaryButton}>
+          <Text style={styles.secondaryButtonText}>Back</Text>
+        </TouchableOpacity>
+        <Text style={styles.headerTitle}>Annotate Photo</Text>
+        <TouchableOpacity
+          disabled={isSaving}
+          onPress={handleSave}
+          style={[styles.primaryButton, isSaving && styles.disabledButton]}
+        >
+          <Text style={styles.primaryButtonText}>{isSaving ? "Saving…" : "Save"}</Text>
+        </TouchableOpacity>
+      </View>
+
+      <View style={styles.toolRow}>
+        <ToolButton label="Circle" active={activeTool === "circle"} onPress={() => setActiveTool("circle")} />
+        <ToolButton label="Arrow" active={activeTool === "arrow"} onPress={() => setActiveTool("arrow")} />
+        <ToolButton label="Text" active={activeTool === "text"} onPress={() => setActiveTool("text")} />
+        <TouchableOpacity
+          disabled={undoDisabled}
+          onPress={undoLastAnnotation}
+          style={[styles.secondaryButton, undoDisabled && styles.disabledButton]}
+        >
+          <Text style={styles.secondaryButtonText}>Undo</Text>
+        </TouchableOpacity>
+        <TouchableOpacity
+          disabled={annotations.length === 0}
+          onPress={() => setAnnotations([])}
+          style={[styles.secondaryButton, annotations.length === 0 && styles.disabledButton]}
+        >
+          <Text style={styles.secondaryButtonText}>Clear</Text>
+        </TouchableOpacity>
+      </View>
+      <Text style={styles.instructions}>{instructionText}</Text>
+
+      <View style={styles.editorArea}>
+        <View style={styles.canvasShell}>
+          <ViewShot
+            ref={viewShotRef}
+            options={{
+              fileName: captureFileName,
+              format: "png",
+              quality: 1,
+            }}
+            style={[styles.viewShot, { aspectRatio }]}
+          >
+            <View onLayout={handleLayout} style={styles.canvasWrapper}>
+              <ImageBackground uri={capturedPhoto.uri} />
+              {canvasSize ? (
+                <View
+                  pointerEvents="box-only"
+                  style={StyleSheet.absoluteFill}
+                  onStartShouldSetResponder={() => true}
+                  onResponderRelease={handleCanvasPress}
+                >
+                  <Svg height={canvasSize.height} width={canvasSize.width}>
+                    {annotations.map((annotation) => renderAnnotation(annotation))}
+                    {pendingPoint && (
+                      <Circle
+                        cx={denormalizePoint(pendingPoint, canvasSize).x}
+                        cy={denormalizePoint(pendingPoint, canvasSize).y}
+                        r={8}
+                        fill="#60a5fa"
+                      />
+                    )}
+                  </Svg>
+                </View>
+              ) : null}
+            </View>
+          </ViewShot>
+        </View>
+      </View>
+
+      <View style={styles.footer}>
+        <Text style={styles.footerText}>{geotagDisplay}</Text>
+      </View>
+
+      <Modal animationType="slide" transparent visible={textModalVisible} onRequestClose={cancelText}>
+        <View style={styles.modalBackdrop}>
+          <View style={styles.modalContent}>
+            <Text style={styles.modalTitle}>Add text annotation</Text>
+            <TextInput
+              autoFocus
+              onChangeText={setTextDraft}
+              placeholder="Enter label"
+              placeholderTextColor="#6b7280"
+              style={styles.textInput}
+              value={textDraft}
+            />
+            <View style={styles.modalActions}>
+              <TouchableOpacity onPress={cancelText} style={[styles.secondaryButton, styles.modalButton]}>
+                <Text style={styles.secondaryButtonText}>Cancel</Text>
+              </TouchableOpacity>
+              <TouchableOpacity onPress={confirmText} style={[styles.primaryButton, styles.modalButton]}>
+                <Text style={styles.primaryButtonText}>Add</Text>
+              </TouchableOpacity>
+            </View>
+          </View>
+        </View>
+      </Modal>
+    </SafeAreaView>
+  );
+};
+
+const ToolButton = ({ label, active, onPress }: { label: string; active: boolean; onPress: () => void }) => {
+  return (
+    <TouchableOpacity onPress={onPress} style={[styles.toolButton, active && styles.toolButtonActive]}>
+      <Text style={[styles.toolButtonText, active && styles.toolButtonTextActive]}>{label}</Text>
+    </TouchableOpacity>
+  );
+};
+
+const ImageBackground = ({ uri }: { uri: string }) => {
+  return (
+    <Image
+      accessible
+      accessibilityIgnoresInvertColors
+      contentFit="contain"
+      source={{ uri }}
+      style={styles.imagePlaceholder}
+    />
+  );
+};
+
+const styles = StyleSheet.create({
+  container: { flex: 1, backgroundColor: "#0f172a" },
+  header: {
+    flexDirection: "row",
+    alignItems: "center",
+    justifyContent: "space-between",
+    paddingHorizontal: 16,
+    paddingVertical: 12,
+  },
+  headerTitle: {
+    color: "#f8fafc",
+    fontSize: 18,
+    fontWeight: "700",
+  },
+  toolRow: {
+    flexDirection: "row",
+    alignItems: "center",
+    paddingHorizontal: 16,
+    paddingBottom: 12,
+    gap: 8,
+  },
+  instructions: {
+    color: "#94a3b8",
+    fontSize: 13,
+    paddingHorizontal: 16,
+    paddingBottom: 8,
+  },
+  editorArea: {
+    flex: 1,
+    paddingHorizontal: 16,
+    paddingBottom: 12,
+  },
+  canvasShell: {
+    flex: 1,
+    alignItems: "center",
+    justifyContent: "center",
+  },
+  viewShot: {
+    width: "100%",
+    maxHeight: "100%",
+    borderRadius: 12,
+    overflow: "hidden",
+    backgroundColor: "#000",
+  },
+  canvasWrapper: {
+    flex: 1,
+  },
+  footer: {
+    paddingHorizontal: 16,
+    paddingBottom: 16,
+  },
+  footerText: {
+    color: "#93c5fd",
+    textAlign: "center",
+    fontSize: 14,
+  },
+  toolButton: {
+    paddingHorizontal: 14,
+    paddingVertical: 8,
+    borderRadius: 20,
+    backgroundColor: "#1e293b",
+  },
+  toolButtonActive: {
+    backgroundColor: "#2563eb",
+  },
+  toolButtonText: {
+    color: "#cbd5f5",
+    fontSize: 14,
+    fontWeight: "600",
+  },
+  toolButtonTextActive: {
+    color: "#ffffff",
+  },
+  secondaryButton: {
+    backgroundColor: "#1f2937",
+    borderRadius: 20,
+    paddingHorizontal: 16,
+    paddingVertical: 10,
+  },
+  secondaryButtonText: {
+    color: "#e5e7eb",
+    fontSize: 14,
+    fontWeight: "600",
+  },
+  primaryButton: {
+    backgroundColor: "#10b981",
+    borderRadius: 20,
+    paddingHorizontal: 18,
+    paddingVertical: 10,
+  },
+  primaryButtonText: {
+    color: "#f8fafc",
+    fontSize: 14,
+    fontWeight: "700",
+  },
+  disabledButton: {
+    opacity: 0.5,
+  },
+  imagePlaceholder: {
+    ...StyleSheet.absoluteFillObject,
+  },
+  modalBackdrop: {
+    flex: 1,
+    backgroundColor: "rgba(15, 23, 42, 0.8)",
+    justifyContent: "center",
+    paddingHorizontal: 24,
+  },
+  modalContent: {
+    backgroundColor: "#0f172a",
+    borderRadius: 16,
+    padding: 20,
+    gap: 12,
+  },
+  modalTitle: {
+    color: "#f8fafc",
+    fontSize: 18,
+    fontWeight: "700",
+  },
+  textInput: {
+    backgroundColor: "#1e293b",
+    borderRadius: 12,
+    color: "#f8fafc",
+    paddingHorizontal: 12,
+    paddingVertical: 10,
+  },
+  modalActions: {
+    flexDirection: "row",
+    justifyContent: "flex-end",
+    gap: 12,
+  },
+  modalButton: {
+    paddingHorizontal: 14,
+  },
+});
+
+export default CameraEditScreen;
diff --git a/dTAK/app/camera/index.tsx b/dTAK/app/camera/index.tsx
new file mode 100644
index 00000000..73154d69
--- /dev/null
+++ b/dTAK/app/camera/index.tsx
@@ -0,0 +1,254 @@
+import { useFocusEffect, useRouter } from "expo-router";
+import { CameraView, useCameraPermissions } from "expo-camera";
+import * as Location from "expo-location";
+import React, { useCallback, useEffect, useMemo, useRef, useState } from "react";
+import {
+  ActivityIndicator,
+  Alert,
+  SafeAreaView,
+  StyleSheet,
+  Text,
+  TouchableOpacity,
+  View,
+} from "react-native";
+
+import { useCameraSession } from "../../src/features/camera/CameraSessionContext";
+import { GeoLocation } from "../../src/features/camera/types";
+
+const createId = () => `${Date.now()}-${Math.round(Math.random() * 1_000_000)}`;
+
+const CameraCaptureScreen = () => {
+  const router = useRouter();
+  const cameraRef = useRef<CameraView | null>(null);
+  const { setCapturedPhoto, resetSession } = useCameraSession();
+  const [cameraPermission, requestCameraPermission] = useCameraPermissions();
+  const [isCapturing, setIsCapturing] = useState(false);
+  const [errorMessage, setErrorMessage] = useState<string | null>(null);
+
+  useFocusEffect(
+    useCallback(() => {
+      resetSession();
+    }, [resetSession])
+  );
+
+  useEffect(() => {
+    if (!cameraPermission) {
+      requestCameraPermission().catch((error) => {
+        console.warn("Failed to request camera permission", error);
+      });
+    }
+  }, [cameraPermission, requestCameraPermission]);
+
+  const ensureCameraGranted = useCallback(async () => {
+    if (cameraPermission?.granted) {
+      return true;
+    }
+
+    const response = await requestCameraPermission();
+    if (!response.granted) {
+      Alert.alert(
+        "Camera permission required",
+        "Enable camera access in device settings to capture photos."
+      );
+    }
+
+    return response.granted;
+  }, [cameraPermission?.granted, requestCameraPermission]);
+
+  const captureLocation = useCallback(async (): Promise<GeoLocation | undefined> => {
+    try {
+      const permission = await Location.requestForegroundPermissionsAsync();
+      if (permission.status !== Location.PermissionStatus.GRANTED) {
+        return undefined;
+      }
+
+      const position = await Location.getCurrentPositionAsync({
+        accuracy: Location.Accuracy.High,
+      });
+
+      return {
+        latitude: position.coords.latitude,
+        longitude: position.coords.longitude,
+        accuracy: position.coords.accuracy ?? undefined,
+        timestamp: position.timestamp,
+      };
+    } catch (error) {
+      console.warn("Failed to capture location", error);
+      return undefined;
+    }
+  }, []);
+
+  const handleCapture = useCallback(async () => {
+    if (!cameraRef.current) {
+      return;
+    }
+
+    const granted = await ensureCameraGranted();
+    if (!granted) {
+      return;
+    }
+
+    setIsCapturing(true);
+    setErrorMessage(null);
+
+    try {
+      const photo = await cameraRef.current.takePictureAsync({
+        quality: 1,
+        skipProcessing: true,
+        exif: true,
+      });
+
+      if (!photo) {
+        throw new Error("Capture returned no photo");
+      }
+
+      const location = await captureLocation();
+
+      setCapturedPhoto({
+        id: createId(),
+        uri: photo.uri,
+        width: photo.width ?? 0,
+        height: photo.height ?? 0,
+        exif: photo.exif ?? undefined,
+        geolocation: location,
+      });
+
+      router.push("/camera/preview" as never);
+    } catch (error) {
+      console.error("Failed to take picture", error);
+      setErrorMessage("Unable to capture photo. Try again.");
+    } finally {
+      setIsCapturing(false);
+    }
+  }, [captureLocation, ensureCameraGranted, router, setCapturedPhoto]);
+
+  const permissionStatus = cameraPermission?.granted;
+  const isPermissionUndetermined = useMemo(() => cameraPermission === null, [cameraPermission]);
+
+  const goHome = () => router.replace("/" as never);
+
+  return (
+    <SafeAreaView style={styles.container}>
+      {permissionStatus ? (
+        <View style={styles.cameraContainer}>
+          <CameraView ref={cameraRef} style={styles.camera} facing="back" enableTorch={false} />
+          <View style={styles.topBar}>
+            <TouchableOpacity accessibilityRole="button" onPress={goHome} style={styles.backButton}>
+              <Text style={styles.backButtonText}>Home</Text>
+            </TouchableOpacity>
+          </View>
+          <View style={styles.controls}>
+            <TouchableOpacity
+              accessibilityHint="Capture a photo"
+              accessibilityRole="button"
+              disabled={isCapturing}
+              onPress={handleCapture}
+              style={[styles.captureButton, isCapturing && styles.captureButtonDisabled]}
+            >
+              {isCapturing ? <ActivityIndicator color="#ffffff" /> : <Text style={styles.captureButtonText}>Snap</Text>}
+            </TouchableOpacity>
+          </View>
+          {errorMessage ? <Text style={styles.errorText}>{errorMessage}</Text> : null}
+        </View>
+      ) : (
+        <View style={styles.permissionContainer}>
+          {isPermissionUndetermined ? (
+            <ActivityIndicator />
+          ) : (
+            <>
+              <Text style={styles.permissionTitle}>Camera access needed</Text>
+              <Text style={styles.permissionSubtitle}>
+                We use the camera to capture images for mission annotations. Grant permission to continue.
+              </Text>
+              <TouchableOpacity onPress={requestCameraPermission} style={styles.permissionButton}>
+                <Text style={styles.permissionButtonText}>Grant camera access</Text>
+              </TouchableOpacity>
+            </>
+          )}
+        </View>
+      )}
+    </SafeAreaView>
+  );
+};
+
+const styles = StyleSheet.create({
+  container: { flex: 1, backgroundColor: "#000" },
+  cameraContainer: { flex: 1, justifyContent: "flex-end" },
+  camera: { ...StyleSheet.absoluteFillObject },
+  controls: {
+    alignItems: "center",
+    justifyContent: "center",
+    paddingBottom: 48,
+  },
+  topBar: {
+    position: "absolute",
+    top: 24,
+    left: 20,
+  },
+  backButton: {
+    backgroundColor: "rgba(17, 24, 39, 0.8)",
+    paddingHorizontal: 16,
+    paddingVertical: 10,
+    borderRadius: 20,
+  },
+  backButtonText: {
+    color: "#f8fafc",
+    fontSize: 16,
+    fontWeight: "600",
+  },
+  captureButton: {
+    alignItems: "center",
+    backgroundColor: "#1f2933",
+    borderRadius: 48,
+    height: 72,
+    justifyContent: "center",
+    width: 72,
+  },
+  captureButtonDisabled: {
+    opacity: 0.65,
+  },
+  captureButtonText: {
+    color: "#fff",
+    fontSize: 18,
+    fontWeight: "600",
+    letterSpacing: 0.4,
+  },
+  errorText: {
+    color: "#f87171",
+    textAlign: "center",
+    marginBottom: 16,
+  },
+  permissionContainer: {
+    flex: 1,
+    alignItems: "center",
+    justifyContent: "center",
+    paddingHorizontal: 32,
+    backgroundColor: "#111827",
+  },
+  permissionTitle: {
+    color: "#fff",
+    fontSize: 22,
+    fontWeight: "700",
+    marginBottom: 8,
+    textAlign: "center",
+  },
+  permissionSubtitle: {
+    color: "#d1d5db",
+    fontSize: 15,
+    marginBottom: 24,
+    textAlign: "center",
+  },
+  permissionButton: {
+    backgroundColor: "#2563eb",
+    paddingHorizontal: 24,
+    paddingVertical: 12,
+    borderRadius: 24,
+  },
+  permissionButtonText: {
+    color: "#ffffff",
+    fontSize: 16,
+    fontWeight: "600",
+  },
+});
+
+export default CameraCaptureScreen;
diff --git a/dTAK/app/camera/preview.tsx b/dTAK/app/camera/preview.tsx
new file mode 100644
index 00000000..c297ce88
--- /dev/null
+++ b/dTAK/app/camera/preview.tsx
@@ -0,0 +1,113 @@
+import { useRouter } from "expo-router";
+import React, { useEffect } from "react";
+import { Image } from "expo-image";
+import { SafeAreaView, StyleSheet, Text, TouchableOpacity, View } from "react-native";
+
+import { useCameraSession } from "../../src/features/camera/CameraSessionContext";
+
+const CameraPreviewScreen = () => {
+  const router = useRouter();
+  const { capturedPhoto, setCapturedPhoto } = useCameraSession();
+
+  useEffect(() => {
+    if (!capturedPhoto) {
+      router.replace("/camera" as never);
+    }
+  }, [capturedPhoto, router]);
+
+  if (!capturedPhoto) {
+    return null;
+  }
+
+  const goBackToCamera = () => router.replace("/camera" as never);
+  const openEditor = () => router.push("/camera/edit" as never);
+
+  const handleRetake = () => {
+    setCapturedPhoto(undefined);
+    goBackToCamera();
+  };
+
+  const handleAccept = () => {
+    openEditor();
+  };
+
+  return (
+    <SafeAreaView style={styles.container}>
+      <View style={styles.imageContainer}>
+        <Image
+          contentFit="contain"
+          source={{ uri: capturedPhoto.uri }}
+          style={styles.image}
+          transition={250}
+        />
+      </View>
+      <View style={styles.metadataContainer}>
+        {capturedPhoto.geolocation ? (
+          <Text style={styles.metadataText}>
+            Lat {capturedPhoto.geolocation.latitude.toFixed(5)} · Lng {capturedPhoto.geolocation.longitude.toFixed(5)}
+          </Text>
+        ) : (
+          <Text style={styles.metadataText}>Location unavailable</Text>
+        )}
+      </View>
+      <View style={styles.actions}>
+        <TouchableOpacity onPress={handleRetake} style={[styles.button, styles.cancelButton]}>
+          <Text style={styles.buttonText}>Retake</Text>
+        </TouchableOpacity>
+        <TouchableOpacity onPress={handleAccept} style={[styles.button, styles.acceptButton]}>
+          <Text style={styles.buttonText}>Use Photo</Text>
+        </TouchableOpacity>
+      </View>
+    </SafeAreaView>
+  );
+};
+
+const styles = StyleSheet.create({
+  container: { flex: 1, backgroundColor: "#000" },
+  imageContainer: {
+    flex: 1,
+    alignItems: "center",
+    justifyContent: "center",
+    padding: 16,
+  },
+  image: {
+    height: "100%",
+    width: "100%",
+    borderRadius: 12,
+  },
+  metadataContainer: {
+    paddingHorizontal: 16,
+    paddingBottom: 12,
+  },
+  metadataText: {
+    color: "#d1d5db",
+    fontSize: 14,
+    textAlign: "center",
+  },
+  actions: {
+    flexDirection: "row",
+    justifyContent: "space-evenly",
+    paddingHorizontal: 24,
+    paddingBottom: 32,
+  },
+  button: {
+    flex: 1,
+    alignItems: "center",
+    paddingVertical: 14,
+    marginHorizontal: 8,
+    borderRadius: 28,
+  },
+  cancelButton: {
+    backgroundColor: "#374151",
+  },
+  acceptButton: {
+    backgroundColor: "#2563eb",
+  },
+  buttonText: {
+    color: "#ffffff",
+    fontSize: 16,
+    fontWeight: "600",
+  },
+});
+
+export default CameraPreviewScreen;
diff --git a/dTAK/app/index.tsx b/dTAK/app/index.tsx
index d4bbe211..68e280e3 100644
--- a/dTAK/app/index.tsx
+++ b/dTAK/app/index.tsx
@@ -18,7 +18,8 @@ import {
 	type MapViewRef,
 } from "@maplibre/maplibre-react-native";
 import React, { useMemo, useRef, useState } from "react";
-import { GestureResponderEvent, StyleSheet, TouchableOpacity, View, Text } from "react-native";
+import { useRouter } from "expo-router";
+import { GestureResponderEvent, StyleSheet, TouchableOpacity, View, Text, Pressable } from "react-native";
 import { SafeAreaView, useSafeAreaInsets } from "react-native-safe-area-context";
 import { performAction } from "../features/map/actions/radialActions";
 import { DeleteOverlay } from "../features/map/components/DeleteOverlay";
@@ -61,6 +62,7 @@ const mapConfigurations = {
 };
 
 export default function App() {
+	const router = useRouter();
 	const insets = useSafeAreaInsets();
 	const [visible, setVisible] = useState(false);
 	const [anchor, setAnchor] = useState<{ x: number; y: number }>({ x: 0, y: 0 });
@@ -76,6 +78,10 @@ export default function App() {
 	const offline = useOfflineMaps();
 
 	const sheetRef = useRef<BottomSheet>(null);
+
+	const handleCameraPress = () => {
+		router.push("/camera" as never);
+	};
 	const snapPoints = useMemo(() => ["32%", "55%", "90%"], []);
 	const [bottomSheetIndex, setBottomSheetIndex] = useState(2);
 	const isBottomSheetExpanded = bottomSheetIndex > -1;
@@ -245,9 +251,20 @@ export default function App() {
 
 			{/* Toolbar fixed at the top */}
 			<SafeAreaView style={styles.toolbarContainer}>
-				<Toolbar onAccountPress={() => setAccountMenuVisible((prev) => !prev)} />
+				<Toolbar
+					onAccountPress={() => setAccountMenuVisible((prev) => !prev)}
+					onCameraPress={handleCameraPress}
+				/>
 			</SafeAreaView>
 
+			<Pressable
+				accessibilityLabel="Open camera"
+				accessibilityHint="Launches the camera capture workflow"
+				onPress={handleCameraPress}
+				style={styles.cameraButton}>
+				<Text style={styles.cameraButtonText}>Camera</Text>
+			</Pressable>
+
 			{/* Bottom drawer always visible */}
 			<BottomSheet
 				ref={sheetRef}
@@ -424,6 +441,25 @@ const styles = StyleSheet.create({
 		left: 0,
 		right: 0,
 	},
+	cameraButton: {
+		position: "absolute",
+		right: 24,
+		bottom: 32,
+		backgroundColor: "#1f2933",
+		borderRadius: 24,
+		paddingHorizontal: 20,
+		paddingVertical: 12,
+		elevation: 2,
+		shadowColor: "#000",
+		shadowOpacity: 0.3,
+		shadowOffset: { width: 0, height: 4 },
+		shadowRadius: 6,
+	},
+	cameraButtonText: {
+		color: "#ffffff",
+		fontSize: 16,
+		fontWeight: "600",
+	},
 	// BottomSheet always docked at bottom
 	bottomSheet: {
 		position: "absolute",
diff --git a/dTAK/components/Toolbar.tsx b/dTAK/components/Toolbar.tsx
index ecb785dd..7203cc64 100644
--- a/dTAK/components/Toolbar.tsx
+++ b/dTAK/components/Toolbar.tsx
@@ -7,9 +7,10 @@ import TransparentButton from "./TransparentButton";
 type ToolbarProps = {
 	style?: ViewStyle;
 	onAccountPress?: (event: GestureResponderEvent) => void;
+	onCameraPress?: (event: GestureResponderEvent) => void;
 };
 
-export default function Toolbar({ style, onAccountPress }: ToolbarProps) {
+export default function Toolbar({ style, onAccountPress, onCameraPress }: ToolbarProps) {
 	const [showUtilityPills, setShowUtilityPills] = useState(true);
 
 	return (
@@ -35,7 +36,9 @@ export default function Toolbar({ style, onAccountPress }: ToolbarProps) {
 			<>
 				<ToolbarPill
 					iconComponent={<Feather name="camera" size={20} color="#FFFFFF" />}
+					onPress={onCameraPress}
 					accessibilityLabel="Open camera"
+					ariaHint="Launches the camera capture workflow"
 				/>
 				<ToolbarPill icon={require("@assets/images/group-chat.png")} text="Chat" />
 			</>
diff --git a/dTAK/ios/Podfile.lock b/dTAK/ios/Podfile.lock
index 0bf1dd56..8884ea81 100644
--- a/dTAK/ios/Podfile.lock
+++ b/dTAK/ios/Podfile.lock
@@ -1,6 +1,9 @@
 PODS:
   - EXConstants (18.0.9):
     - ExpoModulesCore
+  - EXImageLoader (6.0.0):
+    - ExpoModulesCore
+    - React-Core
   - Expo (54.0.8):
     - ExpoModulesCore
     - hermes-engine
@@ -28,6 +31,10 @@ PODS:
     - Yoga
   - ExpoAsset (12.0.8):
     - ExpoModulesCore
+  - ExpoCamera (17.0.8):
+    - ExpoModulesCore
+    - ZXingObjC/OneD
+    - ZXingObjC/PDF417
   - ExpoFileSystem (19.0.14):
     - ExpoModulesCore
   - ExpoFont (14.0.8):
@@ -44,10 +51,19 @@ PODS:
     - SDWebImageAVIFCoder (~> 0.11.0)
     - SDWebImageSVGCoder (~> 1.7.0)
     - SDWebImageWebPCoder (~> 0.14.6)
+  - ExpoImageManipulator (14.0.7):
+    - EXImageLoader
+    - ExpoModulesCore
+    - SDWebImageWebPCoder
   - ExpoKeepAwake (15.0.7):
     - ExpoModulesCore
   - ExpoLinking (8.0.8):
     - ExpoModulesCore
+  - ExpoLocation (19.0.7):
+    - ExpoModulesCore
+  - ExpoMediaLibrary (18.2.0):
+    - ExpoModulesCore
+    - React-Core
   - ExpoModulesCore (3.0.16):
     - hermes-engine
     - RCTRequired
@@ -1506,6 +1522,28 @@ PODS:
     - ReactCommon/turbomodule/core
     - ReactNativeDependencies
     - Yoga
+  - react-native-view-shot (4.0.3):
+    - hermes-engine
+    - RCTRequired
+    - RCTTypeSafety
+    - React-Core
+    - React-Core-prebuilt
+    - React-debug
+    - React-Fabric
+    - React-featureflags
+    - React-graphics
+    - React-ImageManager
+    - React-jsi
+    - React-NativeModulesApple
+    - React-RCTFabric
+    - React-renderercss
+    - React-rendererdebug
+    - React-utils
+    - ReactCodegen
+    - ReactCommon/turbomodule/bridging
+    - ReactCommon/turbomodule/core
+    - ReactNativeDependencies
+    - Yoga
   - React-NativeModulesApple (0.81.4):
     - hermes-engine
     - React-callinvoker
@@ -1999,6 +2037,51 @@ PODS:
     - ReactCommon/turbomodule/core
     - ReactNativeDependencies
     - Yoga
+  - RNSVG (15.12.1):
+    - hermes-engine
+    - RCTRequired
+    - RCTTypeSafety
+    - React-Core
+    - React-Core-prebuilt
+    - React-debug
+    - React-Fabric
+    - React-featureflags
+    - React-graphics
+    - React-ImageManager
+    - React-jsi
+    - React-NativeModulesApple
+    - React-RCTFabric
+    - React-renderercss
+    - React-rendererdebug
+    - React-utils
+    - ReactCodegen
+    - ReactCommon/turbomodule/bridging
+    - ReactCommon/turbomodule/core
+    - ReactNativeDependencies
+    - RNSVG/common (= 15.12.1)
+    - Yoga
+  - RNSVG/common (15.12.1):
+    - hermes-engine
+    - RCTRequired
+    - RCTTypeSafety
+    - React-Core
+    - React-Core-prebuilt
+    - React-debug
+    - React-Fabric
+    - React-featureflags
+    - React-graphics
+    - React-ImageManager
+    - React-jsi
+    - React-NativeModulesApple
+    - React-RCTFabric
+    - React-renderercss
+    - React-rendererdebug
+    - React-utils
+    - ReactCodegen
+    - ReactCommon/turbomodule/bridging
+    - ReactCommon/turbomodule/core
+    - ReactNativeDependencies
+    - Yoga
   - RNWorklets (0.5.1):
     - hermes-engine
     - RCTRequired
@@ -2070,9 +2153,9 @@ PODS:
     - ReactCommon/turbomodule/core
     - ReactNativeDependencies
     - Yoga
-  - SDWebImage (5.21.2):
-    - SDWebImage/Core (= 5.21.2)
-  - SDWebImage/Core (5.21.2)
+  - SDWebImage (5.21.1):
+    - SDWebImage/Core (= 5.21.1)
+  - SDWebImage/Core (5.21.1)
   - SDWebImageAVIFCoder (0.11.1):
     - libavif/core (>= 0.11.0)
     - SDWebImage (~> 5.10)
@@ -2082,18 +2165,28 @@ PODS:
     - libwebp (~> 1.0)
     - SDWebImage/Core (~> 5.17)
   - Yoga (0.0.0)
+  - ZXingObjC/Core (3.6.9)
+  - ZXingObjC/OneD (3.6.9):
+    - ZXingObjC/Core
+  - ZXingObjC/PDF417 (3.6.9):
+    - ZXingObjC/Core
 
 DEPENDENCIES:
   - EXConstants (from `../node_modules/expo-constants/ios`)
+  - EXImageLoader (from `../node_modules/expo-image-loader/ios`)
   - Expo (from `../node_modules/expo`)
   - ExpoAsset (from `../node_modules/expo-asset/ios`)
+  - ExpoCamera (from `../node_modules/expo-camera/ios`)
   - ExpoFileSystem (from `../node_modules/expo-file-system/ios`)
   - ExpoFont (from `../node_modules/expo-font/ios`)
   - ExpoHaptics (from `../node_modules/expo-haptics/ios`)
   - ExpoHead (from `../node_modules/expo-router/ios`)
   - ExpoImage (from `../node_modules/expo-image/ios`)
+  - ExpoImageManipulator (from `../node_modules/expo-image-manipulator/ios`)
   - ExpoKeepAwake (from `../node_modules/expo-keep-awake/ios`)
   - ExpoLinking (from `../node_modules/expo-linking/ios`)
+  - ExpoLocation (from `../node_modules/expo-location/ios`)
+  - ExpoMediaLibrary (from `../node_modules/expo-media-library/ios`)
   - ExpoModulesCore (from `../node_modules/expo-modules-core`)
   - ExpoNetwork (from `../node_modules/expo-network/ios`)
   - ExpoSplashScreen (from `../node_modules/expo-splash-screen/ios`)
@@ -2141,6 +2234,7 @@ DEPENDENCIES:
   - "react-native-netinfo (from `../node_modules/@react-native-community/netinfo`)"
   - react-native-safe-area-context (from `../node_modules/react-native-safe-area-context`)
   - "react-native-slider (from `../node_modules/@react-native-community/slider`)"
+  - react-native-view-shot (from `../node_modules/react-native-view-shot`)
   - React-NativeModulesApple (from `../node_modules/react-native/ReactCommon/react/nativemodule/core/platform/ios`)
   - React-oscompat (from `../node_modules/react-native/ReactCommon/oscompat`)
   - React-perflogger (from `../node_modules/react-native/ReactCommon/reactperflogger`)
@@ -2175,6 +2269,7 @@ DEPENDENCIES:
   - RNGestureHandler (from `../node_modules/react-native-gesture-handler`)
   - RNReanimated (from `../node_modules/react-native-reanimated`)
   - RNScreens (from `../node_modules/react-native-screens`)
+  - RNSVG (from `../node_modules/react-native-svg`)
   - RNWorklets (from `../node_modules/react-native-worklets`)
   - Yoga (from `../node_modules/react-native/ReactCommon/yoga`)
 
@@ -2187,14 +2282,19 @@ SPEC REPOS:
     - SDWebImageAVIFCoder
     - SDWebImageSVGCoder
     - SDWebImageWebPCoder
+    - ZXingObjC
 
 EXTERNAL SOURCES:
   EXConstants:
     :path: "../node_modules/expo-constants/ios"
+  EXImageLoader:
+    :path: "../node_modules/expo-image-loader/ios"
   Expo:
     :path: "../node_modules/expo"
   ExpoAsset:
     :path: "../node_modules/expo-asset/ios"
+  ExpoCamera:
+    :path: "../node_modules/expo-camera/ios"
   ExpoFileSystem:
     :path: "../node_modules/expo-file-system/ios"
   ExpoFont:
@@ -2205,10 +2305,16 @@ EXTERNAL SOURCES:
     :path: "../node_modules/expo-router/ios"
   ExpoImage:
     :path: "../node_modules/expo-image/ios"
+  ExpoImageManipulator:
+    :path: "../node_modules/expo-image-manipulator/ios"
   ExpoKeepAwake:
     :path: "../node_modules/expo-keep-awake/ios"
   ExpoLinking:
     :path: "../node_modules/expo-linking/ios"
+  ExpoLocation:
+    :path: "../node_modules/expo-location/ios"
+  ExpoMediaLibrary:
+    :path: "../node_modules/expo-media-library/ios"
   ExpoModulesCore:
     :path: "../node_modules/expo-modules-core"
   ExpoNetwork:
@@ -2302,6 +2408,8 @@ EXTERNAL SOURCES:
     :path: "../node_modules/react-native-safe-area-context"
   react-native-slider:
     :path: "../node_modules/@react-native-community/slider"
+  react-native-view-shot:
+    :path: "../node_modules/react-native-view-shot"
   React-NativeModulesApple:
     :path: "../node_modules/react-native/ReactCommon/react/nativemodule/core/platform/ios"
   React-oscompat:
@@ -2370,6 +2478,8 @@ EXTERNAL SOURCES:
     :path: "../node_modules/react-native-reanimated"
   RNScreens:
     :path: "../node_modules/react-native-screens"
+  RNSVG:
+    :path: "../node_modules/react-native-svg"
   RNWorklets:
     :path: "../node_modules/react-native-worklets"
   Yoga:
@@ -2377,15 +2487,20 @@ EXTERNAL SOURCES:
 
 SPEC CHECKSUMS:
   EXConstants: 59d46d25b89f88cc38291a56dbce4d550758f72d
+  EXImageLoader: e501c001bc40b8326605e82e6e80363c80fe06b5
   Expo: 40b8889f991ca5f25ead0bfcbc1f818b01efab9e
   ExpoAsset: 4375a46b45b12bbfcf6efac8c8a33aebdb8ba12b
+  ExpoCamera: 6d0c5bc68bc8de669f1ecd4242284de0827c4431
   ExpoFileSystem: adffad7d1f57f768ca7a5e3bf450312fb9ebd27a
   ExpoFont: d3e56c7cc03d9fd113b90a5513ad32b4bf46b0ff
   ExpoHaptics: b48d913e7e5f23816c6f130e525c9a6501b160b5
   ExpoHead: bd3ceefbd93f64ff8298e07711bb67605ffb646c
   ExpoImage: 306dd755c842dba9f3ee654c51834a9cc657e6ca
+  ExpoImageManipulator: dbf5b8fc805b55463811cb3da96ab60c532faae8
   ExpoKeepAwake: 3f5e3ac53627849174f3603271df8e08f174ed4a
   ExpoLinking: f5c171877e118e792cb9a77e5ade0b080d899b14
+  ExpoLocation: 1dc9e4c06ef66ed081348a11eb637d1dfecc7d61
+  ExpoMediaLibrary: 648cee3f5dcba13410ec9cc8ac9a426e89a61a31
   ExpoModulesCore: af36f958c77e8551bc34cd62cf166eeb6a8d9920
   ExpoNetwork: 0d2c2504d56096fe8be3930d5c70cb3390dac5bf
   ExpoSplashScreen: 9d2ff8fa08f2c00336a83f93bebffed3a8312519
@@ -2435,6 +2550,7 @@ SPEC CHECKSUMS:
   react-native-netinfo: f0a9899081c185db1de5bb2fdc1c88c202a059ac
   react-native-safe-area-context: add9b4ba236fe95ec600604d0fc72f395433dd59
   react-native-slider: b76fa3dd989d25e8c2751c2a546674dfc0c2b6f8
+  react-native-view-shot: 26174e54ec6b4b7c5d70b86964b747919759adc1
   React-NativeModulesApple: e653919faff1f76eadf02373bda26c085bf348e3
   React-oscompat: 73db7dbc80edef36a9d6ed3c6c4e1724ead4236d
   React-perflogger: f2116e7a0c1562ed7cbcaa2c90e8fdb0bc28df78
@@ -2469,12 +2585,14 @@ SPEC CHECKSUMS:
   RNGestureHandler: 6a488ce85c88e82d8610db1108daf04e9b2d5162
   RNReanimated: 8b94f06454f503a37be1d8995d8ef41d190962d0
   RNScreens: dd61bc3a3e6f6901ad833efa411917d44827cf51
+  RNSVG: 2825ee146e0f6a16221e852299943e4cceef4528
   RNWorklets: 28ee7370ca8da356fcc914e3e68b97e9752196d2
-  SDWebImage: 9f177d83116802728e122410fb25ad88f5c7608a
+  SDWebImage: f29024626962457f3470184232766516dee8dfea
   SDWebImageAVIFCoder: afe194a084e851f70228e4be35ef651df0fc5c57
   SDWebImageSVGCoder: 15a300a97ec1c8ac958f009c02220ac0402e936c
   SDWebImageWebPCoder: e38c0a70396191361d60c092933e22c20d5b1380
   Yoga: 051f086b5ccf465ff2ed38a2cf5a558ae01aaaa1
+  ZXingObjC: 8898711ab495761b2dbbdec76d90164a6d7e14c5
 
 PODFILE CHECKSUM: d70fce99e466521213392f0c47911734a89c9646
 
diff --git a/dTAK/ios/dTAK.xcodeproj/project.pbxproj b/dTAK/ios/dTAK.xcodeproj/project.pbxproj
index f53ad1eb..10074161 100644
--- a/dTAK/ios/dTAK.xcodeproj/project.pbxproj
+++ b/dTAK/ios/dTAK.xcodeproj/project.pbxproj
@@ -299,7 +299,9 @@
 				"${PODS_CONFIGURATION_BUILD_DIR}/EXConstants/EXConstants.bundle",
 				"${PODS_CONFIGURATION_BUILD_DIR}/EXConstants/ExpoConstants_privacy.bundle",
 				"${PODS_CONFIGURATION_BUILD_DIR}/ExpoFileSystem/ExpoFileSystem_privacy.bundle",
+				"${PODS_CONFIGURATION_BUILD_DIR}/ExpoMediaLibrary/ExpoMediaLibrary_privacy.bundle",
 				"${PODS_CONFIGURATION_BUILD_DIR}/ExpoSystemUI/ExpoSystemUI_privacy.bundle",
+				"${PODS_CONFIGURATION_BUILD_DIR}/RNSVG/RNSVGFilters.bundle",
 				"${PODS_CONFIGURATION_BUILD_DIR}/React-Core/React-Core_privacy.bundle",
 				"${PODS_CONFIGURATION_BUILD_DIR}/React-cxxreact/React-cxxreact_privacy.bundle",
 				"${PODS_CONFIGURATION_BUILD_DIR}/SDWebImage/SDWebImage.bundle",
@@ -309,7 +311,9 @@
 				"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/EXConstants.bundle",
 				"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/ExpoConstants_privacy.bundle",
 				"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/ExpoFileSystem_privacy.bundle",
+				"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/ExpoMediaLibrary_privacy.bundle",
 				"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/ExpoSystemUI_privacy.bundle",
+				"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/RNSVGFilters.bundle",
 				"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/React-Core_privacy.bundle",
 				"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/React-cxxreact_privacy.bundle",
 				"${TARGET_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}/SDWebImage.bundle",
diff --git a/dTAK/ios/dTAK/Images.xcassets/AppIcon.appiconset/App-Icon-1024x1024@1x.png b/dTAK/ios/dTAK/Images.xcassets/AppIcon.appiconset/App-Icon-1024x1024@1x.png
index 882ea53a..3d6c9efe 100644
Binary files a/dTAK/ios/dTAK/Images.xcassets/AppIcon.appiconset/App-Icon-1024x1024@1x.png and b/dTAK/ios/dTAK/Images.xcassets/AppIcon.appiconset/App-Icon-1024x1024@1x.png differ
diff --git a/dTAK/ios/dTAK/Info.plist b/dTAK/ios/dTAK/Info.plist
index 4632af92..1beb65dc 100644
--- a/dTAK/ios/dTAK/Info.plist
+++ b/dTAK/ios/dTAK/Info.plist
@@ -45,6 +45,14 @@
       <key>NSAllowsLocalNetworking</key>
       <true/>
     </dict>
+			<key>NSCameraUsageDescription</key>
+	<string>Camera access is required to capture mission photos and annotate them for your team.</string>
+	<key>NSLocationWhenInUseUsageDescription</key>
+	<string>Location access attaches geo-coordinates to captured imagery for mission context.</string>
+	<key>NSPhotoLibraryAddUsageDescription</key>
+	<string>Photo library access is needed to save annotated images for later sharing.</string>
+	<key>NSPhotoLibraryUsageDescription</key>
+	<string>Photo library access is needed to import and review mission imagery.</string>
     <key>NSUserActivityTypes</key>
     <array>
       <string>$(PRODUCT_BUNDLE_IDENTIFIER).expo.index_route</string>
@@ -78,4 +86,4 @@
     <key>UIViewControllerBasedStatusBarAppearance</key>
     <false/>
   </dict>
-</plist>
\ No newline at end of file
+</plist>
diff --git a/dTAK/package-lock.json b/dTAK/package-lock.json
index 20ac439e..c91f8f98 100644
--- a/dTAK/package-lock.json
+++ b/dTAK/package-lock.json
@@ -17,12 +17,16 @@
 				"@react-navigation/elements": "^2.6.3",
 				"@react-navigation/native": "^7.1.8",
 				"expo": "~54.0.7",
+				"expo-camera": "~17.0.8",
 				"expo-constants": "~18.0.8",
 				"expo-file-system": "^19.0.14",
 				"expo-font": "~14.0.8",
 				"expo-haptics": "~15.0.7",
 				"expo-image": "~3.0.8",
+				"expo-image-manipulator": "~14.0.7",
 				"expo-linking": "~8.0.8",
+				"expo-location": "~19.0.7",
+				"expo-media-library": "~18.2.0",
 				"expo-network": "~6.0.0",
 				"expo-router": "~6.0.4",
 				"expo-splash-screen": "~31.0.10",
@@ -40,6 +44,8 @@
 				"react-native-reanimated": "~4.1.0",
 				"react-native-safe-area-context": "~5.6.0",
 				"react-native-screens": "~4.16.0",
+				"react-native-svg": "15.12.1",
+				"react-native-view-shot": "4.0.3",
 				"react-native-web": "~0.21.0",
 				"react-native-worklets": "0.5.1",
 				"uuid": "^13.0.0"
@@ -48,6 +54,7 @@
 				"@types/react": "~19.1.0",
 				"eslint": "^9.25.0",
 				"eslint-config-expo": "~10.0.0",
+				"tsx": "^4.19.2",
 				"typescript": "~5.9.2"
 			}
 		},
@@ -1482,6 +1489,448 @@
 				"tslib": "^2.4.0"
 			}
 		},
+		"node_modules/@esbuild/aix-ppc64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.25.10.tgz",
+			"integrity": "sha512-0NFWnA+7l41irNuaSVlLfgNT12caWJVLzp5eAVhZ0z1qpxbockccEt3s+149rE64VUI3Ml2zt8Nv5JVc4QXTsw==",
+			"cpu": [
+				"ppc64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"aix"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/android-arm": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.25.10.tgz",
+			"integrity": "sha512-dQAxF1dW1C3zpeCDc5KqIYuZ1tgAdRXNoZP7vkBIRtKZPYe2xVr/d3SkirklCHudW1B45tGiUlz2pUWDfbDD4w==",
+			"cpu": [
+				"arm"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"android"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/android-arm64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.25.10.tgz",
+			"integrity": "sha512-LSQa7eDahypv/VO6WKohZGPSJDq5OVOo3UoFR1E4t4Gj1W7zEQMUhI+lo81H+DtB+kP+tDgBp+M4oNCwp6kffg==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"android"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/android-x64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.25.10.tgz",
+			"integrity": "sha512-MiC9CWdPrfhibcXwr39p9ha1x0lZJ9KaVfvzA0Wxwz9ETX4v5CHfF09bx935nHlhi+MxhA63dKRRQLiVgSUtEg==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"android"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/darwin-arm64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.25.10.tgz",
+			"integrity": "sha512-JC74bdXcQEpW9KkV326WpZZjLguSZ3DfS8wrrvPMHgQOIEIG/sPXEN/V8IssoJhbefLRcRqw6RQH2NnpdprtMA==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"darwin"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/darwin-x64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.25.10.tgz",
+			"integrity": "sha512-tguWg1olF6DGqzws97pKZ8G2L7Ig1vjDmGTwcTuYHbuU6TTjJe5FXbgs5C1BBzHbJ2bo1m3WkQDbWO2PvamRcg==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"darwin"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/freebsd-arm64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.25.10.tgz",
+			"integrity": "sha512-3ZioSQSg1HT2N05YxeJWYR+Libe3bREVSdWhEEgExWaDtyFbbXWb49QgPvFH8u03vUPX10JhJPcz7s9t9+boWg==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"freebsd"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/freebsd-x64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.25.10.tgz",
+			"integrity": "sha512-LLgJfHJk014Aa4anGDbh8bmI5Lk+QidDmGzuC2D+vP7mv/GeSN+H39zOf7pN5N8p059FcOfs2bVlrRr4SK9WxA==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"freebsd"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/linux-arm": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.25.10.tgz",
+			"integrity": "sha512-oR31GtBTFYCqEBALI9r6WxoU/ZofZl962pouZRTEYECvNF/dtXKku8YXcJkhgK/beU+zedXfIzHijSRapJY3vg==",
+			"cpu": [
+				"arm"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/linux-arm64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.25.10.tgz",
+			"integrity": "sha512-5luJWN6YKBsawd5f9i4+c+geYiVEw20FVW5x0v1kEMWNq8UctFjDiMATBxLvmmHA4bf7F6hTRaJgtghFr9iziQ==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/linux-ia32": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.25.10.tgz",
+			"integrity": "sha512-NrSCx2Kim3EnnWgS4Txn0QGt0Xipoumb6z6sUtl5bOEZIVKhzfyp/Lyw4C1DIYvzeW/5mWYPBFJU3a/8Yr75DQ==",
+			"cpu": [
+				"ia32"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/linux-loong64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.25.10.tgz",
+			"integrity": "sha512-xoSphrd4AZda8+rUDDfD9J6FUMjrkTz8itpTITM4/xgerAZZcFW7Dv+sun7333IfKxGG8gAq+3NbfEMJfiY+Eg==",
+			"cpu": [
+				"loong64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/linux-mips64el": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.25.10.tgz",
+			"integrity": "sha512-ab6eiuCwoMmYDyTnyptoKkVS3k8fy/1Uvq7Dj5czXI6DF2GqD2ToInBI0SHOp5/X1BdZ26RKc5+qjQNGRBelRA==",
+			"cpu": [
+				"mips64el"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/linux-ppc64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.25.10.tgz",
+			"integrity": "sha512-NLinzzOgZQsGpsTkEbdJTCanwA5/wozN9dSgEl12haXJBzMTpssebuXR42bthOF3z7zXFWH1AmvWunUCkBE4EA==",
+			"cpu": [
+				"ppc64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/linux-riscv64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.25.10.tgz",
+			"integrity": "sha512-FE557XdZDrtX8NMIeA8LBJX3dC2M8VGXwfrQWU7LB5SLOajfJIxmSdyL/gU1m64Zs9CBKvm4UAuBp5aJ8OgnrA==",
+			"cpu": [
+				"riscv64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/linux-s390x": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.25.10.tgz",
+			"integrity": "sha512-3BBSbgzuB9ajLoVZk0mGu+EHlBwkusRmeNYdqmznmMc9zGASFjSsxgkNsqmXugpPk00gJ0JNKh/97nxmjctdew==",
+			"cpu": [
+				"s390x"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/linux-x64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.25.10.tgz",
+			"integrity": "sha512-QSX81KhFoZGwenVyPoberggdW1nrQZSvfVDAIUXr3WqLRZGZqWk/P4T8p2SP+de2Sr5HPcvjhcJzEiulKgnxtA==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"linux"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/netbsd-arm64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/netbsd-arm64/-/netbsd-arm64-0.25.10.tgz",
+			"integrity": "sha512-AKQM3gfYfSW8XRk8DdMCzaLUFB15dTrZfnX8WXQoOUpUBQ+NaAFCP1kPS/ykbbGYz7rxn0WS48/81l9hFl3u4A==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"netbsd"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/netbsd-x64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.25.10.tgz",
+			"integrity": "sha512-7RTytDPGU6fek/hWuN9qQpeGPBZFfB4zZgcz2VK2Z5VpdUxEI8JKYsg3JfO0n/Z1E/6l05n0unDCNc4HnhQGig==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"netbsd"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/openbsd-arm64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/openbsd-arm64/-/openbsd-arm64-0.25.10.tgz",
+			"integrity": "sha512-5Se0VM9Wtq797YFn+dLimf2Zx6McttsH2olUBsDml+lm0GOCRVebRWUvDtkY4BWYv/3NgzS8b/UM3jQNh5hYyw==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"openbsd"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/openbsd-x64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.25.10.tgz",
+			"integrity": "sha512-XkA4frq1TLj4bEMB+2HnI0+4RnjbuGZfet2gs/LNs5Hc7D89ZQBHQ0gL2ND6Lzu1+QVkjp3x1gIcPKzRNP8bXw==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"openbsd"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/openharmony-arm64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/openharmony-arm64/-/openharmony-arm64-0.25.10.tgz",
+			"integrity": "sha512-AVTSBhTX8Y/Fz6OmIVBip9tJzZEUcY8WLh7I59+upa5/GPhh2/aM6bvOMQySspnCCHvFi79kMtdJS1w0DXAeag==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"openharmony"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/sunos-x64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.25.10.tgz",
+			"integrity": "sha512-fswk3XT0Uf2pGJmOpDB7yknqhVkJQkAQOcW/ccVOtfx05LkbWOaRAtn5SaqXypeKQra1QaEa841PgrSL9ubSPQ==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"sunos"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/win32-arm64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.25.10.tgz",
+			"integrity": "sha512-ah+9b59KDTSfpaCg6VdJoOQvKjI33nTaQr4UluQwW7aEwZQsbMCfTmfEO4VyewOxx4RaDT/xCy9ra2GPWmO7Kw==",
+			"cpu": [
+				"arm64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"win32"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/win32-ia32": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.25.10.tgz",
+			"integrity": "sha512-QHPDbKkrGO8/cz9LKVnJU22HOi4pxZnZhhA2HYHez5Pz4JeffhDjf85E57Oyco163GnzNCVkZK0b/n4Y0UHcSw==",
+			"cpu": [
+				"ia32"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"win32"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
+		"node_modules/@esbuild/win32-x64": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.25.10.tgz",
+			"integrity": "sha512-9KpxSVFCu0iK1owoez6aC/s/EdUQLDN3adTxGCqxMVhrPDj6bt5dbrHDXUuq+Bs2vATFBBrQS5vdQ/Ed2P+nbw==",
+			"cpu": [
+				"x64"
+			],
+			"dev": true,
+			"license": "MIT",
+			"optional": true,
+			"os": [
+				"win32"
+			],
+			"engines": {
+				"node": ">=18"
+			}
+		},
 		"node_modules/@eslint-community/eslint-utils": {
 			"version": "4.9.0",
 			"resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.9.0.tgz",
@@ -4723,6 +5172,15 @@
 			"resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
 			"integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw=="
 		},
+		"node_modules/base64-arraybuffer": {
+			"version": "1.0.2",
+			"resolved": "https://registry.npmjs.org/base64-arraybuffer/-/base64-arraybuffer-1.0.2.tgz",
+			"integrity": "sha512-I3yl4r9QB5ZRY3XuJVEPfc2XhZO6YweFPI+UovAzn+8/hb3oJ6lnysaFcjVpkCPfVWFUDvoZ8kmVDP7WyRtYtQ==",
+			"license": "MIT",
+			"engines": {
+				"node": ">= 0.6.0"
+			}
+		},
 		"node_modules/base64-js": {
 			"version": "1.5.1",
 			"resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
@@ -4785,6 +5243,12 @@
 				"node": ">=0.6"
 			}
 		},
+		"node_modules/boolbase": {
+			"version": "1.0.0",
+			"resolved": "https://registry.npmjs.org/boolbase/-/boolbase-1.0.0.tgz",
+			"integrity": "sha512-JZOSA7Mo9sNGB8+UjSgzdLtokWAky1zbztM3WRLCbZ70/3cTANmQmOdR7y2g+J0e2WXywy1yS468tY+IruqEww==",
+			"license": "ISC"
+		},
 		"node_modules/bplist-creator": {
 			"version": "0.1.0",
 			"resolved": "https://registry.npmjs.org/bplist-creator/-/bplist-creator-0.1.0.tgz",
@@ -5401,6 +5865,65 @@
 				"hyphenate-style-name": "^1.0.3"
 			}
 		},
+		"node_modules/css-line-break": {
+			"version": "2.1.0",
+			"resolved": "https://registry.npmjs.org/css-line-break/-/css-line-break-2.1.0.tgz",
+			"integrity": "sha512-FHcKFCZcAha3LwfVBhCQbW2nCNbkZXn7KVUJcsT5/P8YmfsVja0FMPJr0B903j/E69HUphKiV9iQArX8SDYA4w==",
+			"license": "MIT",
+			"dependencies": {
+				"utrie": "^1.0.2"
+			}
+		},
+		"node_modules/css-select": {
+			"version": "5.2.2",
+			"resolved": "https://registry.npmjs.org/css-select/-/css-select-5.2.2.tgz",
+			"integrity": "sha512-TizTzUddG/xYLA3NXodFM0fSbNizXjOKhqiQQwvhlspadZokn1KDy0NZFS0wuEubIYAV5/c1/lAr0TaaFXEXzw==",
+			"license": "BSD-2-Clause",
+			"dependencies": {
+				"boolbase": "^1.0.0",
+				"css-what": "^6.1.0",
+				"domhandler": "^5.0.2",
+				"domutils": "^3.0.1",
+				"nth-check": "^2.0.1"
+			},
+			"funding": {
+				"url": "https://github.com/sponsors/fb55"
+			}
+		},
+		"node_modules/css-tree": {
+			"version": "1.1.3",
+			"resolved": "https://registry.npmjs.org/css-tree/-/css-tree-1.1.3.tgz",
+			"integrity": "sha512-tRpdppF7TRazZrjJ6v3stzv93qxRcSsFmW6cX0Zm2NVKpxE1WV1HblnghVv9TreireHkqI/VDEsfolRF1p6y7Q==",
+			"license": "MIT",
+			"dependencies": {
+				"mdn-data": "2.0.14",
+				"source-map": "^0.6.1"
+			},
+			"engines": {
+				"node": ">=8.0.0"
+			}
+		},
+		"node_modules/css-tree/node_modules/source-map": {
+			"version": "0.6.1",
+			"resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
+			"integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
+			"license": "BSD-3-Clause",
+			"engines": {
+				"node": ">=0.10.0"
+			}
+		},
+		"node_modules/css-what": {
+			"version": "6.2.2",
+			"resolved": "https://registry.npmjs.org/css-what/-/css-what-6.2.2.tgz",
+			"integrity": "sha512-u/O3vwbptzhMs3L1fQE82ZSLHQQfto5gyZzwteVIEyeaY5Fc7R4dapF/BvRoSYFeqfBk4m0V1Vafq5Pjv25wvA==",
+			"license": "BSD-2-Clause",
+			"engines": {
+				"node": ">= 6"
+			},
+			"funding": {
+				"url": "https://github.com/sponsors/fb55"
+			}
+		},
 		"node_modules/csstype": {
 			"version": "3.1.3",
 			"resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
@@ -5610,6 +6133,61 @@
 				"node": ">=0.10.0"
 			}
 		},
+		"node_modules/dom-serializer": {
+			"version": "2.0.0",
+			"resolved": "https://registry.npmjs.org/dom-serializer/-/dom-serializer-2.0.0.tgz",
+			"integrity": "sha512-wIkAryiqt/nV5EQKqQpo3SToSOV9J0DnbJqwK7Wv/Trc92zIAYZ4FlMu+JPFW1DfGFt81ZTCGgDEabffXeLyJg==",
+			"license": "MIT",
+			"dependencies": {
+				"domelementtype": "^2.3.0",
+				"domhandler": "^5.0.2",
+				"entities": "^4.2.0"
+			},
+			"funding": {
+				"url": "https://github.com/cheeriojs/dom-serializer?sponsor=1"
+			}
+		},
+		"node_modules/domelementtype": {
+			"version": "2.3.0",
+			"resolved": "https://registry.npmjs.org/domelementtype/-/domelementtype-2.3.0.tgz",
+			"integrity": "sha512-OLETBj6w0OsagBwdXnPdN0cnMfF9opN69co+7ZrbfPGrdpPVNBUj02spi6B1N7wChLQiPn4CSH/zJvXw56gmHw==",
+			"funding": [
+				{
+					"type": "github",
+					"url": "https://github.com/sponsors/fb55"
+				}
+			],
+			"license": "BSD-2-Clause"
+		},
+		"node_modules/domhandler": {
+			"version": "5.0.3",
+			"resolved": "https://registry.npmjs.org/domhandler/-/domhandler-5.0.3.tgz",
+			"integrity": "sha512-cgwlv/1iFQiFnU96XXgROh8xTeetsnJiDsTc7TYCLFd9+/WNkIqPTxiM/8pSd8VIrhXGTf1Ny1q1hquVqDJB5w==",
+			"license": "BSD-2-Clause",
+			"dependencies": {
+				"domelementtype": "^2.3.0"
+			},
+			"engines": {
+				"node": ">= 4"
+			},
+			"funding": {
+				"url": "https://github.com/fb55/domhandler?sponsor=1"
+			}
+		},
+		"node_modules/domutils": {
+			"version": "3.2.2",
+			"resolved": "https://registry.npmjs.org/domutils/-/domutils-3.2.2.tgz",
+			"integrity": "sha512-6kZKyUajlDuqlHKVX1w7gyslj9MPIXzIFiz/rGu35uC1wMi+kMhQwGhl4lt9unC9Vb9INnY9Z3/ZA3+FhASLaw==",
+			"license": "BSD-2-Clause",
+			"dependencies": {
+				"dom-serializer": "^2.0.0",
+				"domelementtype": "^2.3.0",
+				"domhandler": "^5.0.3"
+			},
+			"funding": {
+				"url": "https://github.com/fb55/domutils?sponsor=1"
+			}
+		},
 		"node_modules/dotenv": {
 			"version": "16.4.7",
 			"resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.4.7.tgz",
@@ -5677,6 +6255,18 @@
 				"node": ">= 0.8"
 			}
 		},
+		"node_modules/entities": {
+			"version": "4.5.0",
+			"resolved": "https://registry.npmjs.org/entities/-/entities-4.5.0.tgz",
+			"integrity": "sha512-V0hjH4dGPh9Ao5p0MoRY6BVqtwCjhz6vI5LT8AJ55H+4g9/4vbHx1I54fS0XuclLhDHArPQCiMjDxjaL8fPxhw==",
+			"license": "BSD-2-Clause",
+			"engines": {
+				"node": ">=0.12"
+			},
+			"funding": {
+				"url": "https://github.com/fb55/entities?sponsor=1"
+			}
+		},
 		"node_modules/env-editor": {
 			"version": "0.4.2",
 			"resolved": "https://registry.npmjs.org/env-editor/-/env-editor-0.4.2.tgz",
@@ -5870,6 +6460,48 @@
 				"url": "https://github.com/sponsors/ljharb"
 			}
 		},
+		"node_modules/esbuild": {
+			"version": "0.25.10",
+			"resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.25.10.tgz",
+			"integrity": "sha512-9RiGKvCwaqxO2owP61uQ4BgNborAQskMR6QusfWzQqv7AZOg5oGehdY2pRJMTKuwxd1IDBP4rSbI5lHzU7SMsQ==",
+			"dev": true,
+			"hasInstallScript": true,
+			"license": "MIT",
+			"bin": {
+				"esbuild": "bin/esbuild"
+			},
+			"engines": {
+				"node": ">=18"
+			},
+			"optionalDependencies": {
+				"@esbuild/aix-ppc64": "0.25.10",
+				"@esbuild/android-arm": "0.25.10",
+				"@esbuild/android-arm64": "0.25.10",
+				"@esbuild/android-x64": "0.25.10",
+				"@esbuild/darwin-arm64": "0.25.10",
+				"@esbuild/darwin-x64": "0.25.10",
+				"@esbuild/freebsd-arm64": "0.25.10",
+				"@esbuild/freebsd-x64": "0.25.10",
+				"@esbuild/linux-arm": "0.25.10",
+				"@esbuild/linux-arm64": "0.25.10",
+				"@esbuild/linux-ia32": "0.25.10",
+				"@esbuild/linux-loong64": "0.25.10",
+				"@esbuild/linux-mips64el": "0.25.10",
+				"@esbuild/linux-ppc64": "0.25.10",
+				"@esbuild/linux-riscv64": "0.25.10",
+				"@esbuild/linux-s390x": "0.25.10",
+				"@esbuild/linux-x64": "0.25.10",
+				"@esbuild/netbsd-arm64": "0.25.10",
+				"@esbuild/netbsd-x64": "0.25.10",
+				"@esbuild/openbsd-arm64": "0.25.10",
+				"@esbuild/openbsd-x64": "0.25.10",
+				"@esbuild/openharmony-arm64": "0.25.10",
+				"@esbuild/sunos-x64": "0.25.10",
+				"@esbuild/win32-arm64": "0.25.10",
+				"@esbuild/win32-ia32": "0.25.10",
+				"@esbuild/win32-x64": "0.25.10"
+			}
+		},
 		"node_modules/escalade": {
 			"version": "3.2.0",
 			"resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
@@ -6370,6 +7002,26 @@
 				"react-native": "*"
 			}
 		},
+		"node_modules/expo-camera": {
+			"version": "17.0.8",
+			"resolved": "https://registry.npmjs.org/expo-camera/-/expo-camera-17.0.8.tgz",
+			"integrity": "sha512-BIGvS+3myaYqMtk2VXWgdcOMrewH+55BttmaYqq9tv9+o5w+RAbH9wlJSt0gdaswikiyzoWT7mOnLDleYClXmw==",
+			"license": "MIT",
+			"dependencies": {
+				"invariant": "^2.2.4"
+			},
+			"peerDependencies": {
+				"expo": "*",
+				"react": "*",
+				"react-native": "*",
+				"react-native-web": "*"
+			},
+			"peerDependenciesMeta": {
+				"react-native-web": {
+					"optional": true
+				}
+			}
+		},
 		"node_modules/expo-constants": {
 			"version": "18.0.9",
 			"resolved": "https://registry.npmjs.org/expo-constants/-/expo-constants-18.0.9.tgz",
@@ -6429,6 +7081,27 @@
 				}
 			}
 		},
+		"node_modules/expo-image-loader": {
+			"version": "6.0.0",
+			"resolved": "https://registry.npmjs.org/expo-image-loader/-/expo-image-loader-6.0.0.tgz",
+			"integrity": "sha512-nKs/xnOGw6ACb4g26xceBD57FKLFkSwEUTDXEDF3Gtcu3MqF3ZIYd3YM+sSb1/z9AKV1dYT7rMSGVNgsveXLIQ==",
+			"license": "MIT",
+			"peerDependencies": {
+				"expo": "*"
+			}
+		},
+		"node_modules/expo-image-manipulator": {
+			"version": "14.0.7",
+			"resolved": "https://registry.npmjs.org/expo-image-manipulator/-/expo-image-manipulator-14.0.7.tgz",
+			"integrity": "sha512-NMHssudagLTAT6ZQ2upnJYT+gVLAt5vC+iD+TBIdV3ZS44yhrq+p2gCrYahDvtVywfmTI5WsbH+Sh1BXbmJUQw==",
+			"license": "MIT",
+			"dependencies": {
+				"expo-image-loader": "~6.0.0"
+			},
+			"peerDependencies": {
+				"expo": "*"
+			}
+		},
 		"node_modules/expo-keep-awake": {
 			"version": "15.0.7",
 			"resolved": "https://registry.npmjs.org/expo-keep-awake/-/expo-keep-awake-15.0.7.tgz",
@@ -6451,6 +7124,25 @@
 				"react-native": "*"
 			}
 		},
+		"node_modules/expo-location": {
+			"version": "19.0.7",
+			"resolved": "https://registry.npmjs.org/expo-location/-/expo-location-19.0.7.tgz",
+			"integrity": "sha512-YNkh4r9E6ECbPkBCAMG5A5yHDgS0pw+Rzyd0l2ZQlCtjkhlODB55nMCKr5CZnUI0mXTkaSm8CwfoCO8n2MpYfg==",
+			"license": "MIT",
+			"peerDependencies": {
+				"expo": "*"
+			}
+		},
+		"node_modules/expo-media-library": {
+			"version": "18.2.0",
+			"resolved": "https://registry.npmjs.org/expo-media-library/-/expo-media-library-18.2.0.tgz",
+			"integrity": "sha512-aIYLIqmU8LFWrQcfZdwg9f/iWm0wC8uhZ7HiUiTnrigtxf417cVvNokX9afXpIOKBHAHRjVIbcs1nN8KZDE2Fw==",
+			"license": "MIT",
+			"peerDependencies": {
+				"expo": "*",
+				"react-native": "*"
+			}
+		},
 		"node_modules/expo-modules-autolinking": {
 			"version": "3.0.11",
 			"resolved": "https://registry.npmjs.org/expo-modules-autolinking/-/expo-modules-autolinking-3.0.11.tgz",
@@ -7493,6 +8185,19 @@
 			"resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.4.3.tgz",
 			"integrity": "sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ=="
 		},
+		"node_modules/html2canvas": {
+			"version": "1.4.1",
+			"resolved": "https://registry.npmjs.org/html2canvas/-/html2canvas-1.4.1.tgz",
+			"integrity": "sha512-fPU6BHNpsyIhr8yyMpTLLxAbkaK8ArIBcmZIRiBLiDhjeqvXolaEmDGmELFuX9I4xDcaKKcJl+TKZLqruBbmWA==",
+			"license": "MIT",
+			"dependencies": {
+				"css-line-break": "^2.1.0",
+				"text-segmentation": "^1.0.3"
+			},
+			"engines": {
+				"node": ">=8.0.0"
+			}
+		},
 		"node_modules/http-errors": {
 			"version": "2.0.0",
 			"resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
@@ -8837,6 +9542,12 @@
 				"node": ">= 0.4"
 			}
 		},
+		"node_modules/mdn-data": {
+			"version": "2.0.14",
+			"resolved": "https://registry.npmjs.org/mdn-data/-/mdn-data-2.0.14.tgz",
+			"integrity": "sha512-dn6wd0uw5GsdswPFfsgMp5NSB0/aDe6fK94YJV/AJDYXL6HVLWBsxeq7js7Ad+mU2K9LAlwpk6kN2D5mwCPVow==",
+			"license": "CC0-1.0"
+		},
 		"node_modules/memoize-one": {
 			"version": "5.2.1",
 			"resolved": "https://registry.npmjs.org/memoize-one/-/memoize-one-5.2.1.tgz",
@@ -9346,6 +10057,18 @@
 				"node": ">=10"
 			}
 		},
+		"node_modules/nth-check": {
+			"version": "2.1.1",
+			"resolved": "https://registry.npmjs.org/nth-check/-/nth-check-2.1.1.tgz",
+			"integrity": "sha512-lqjrjmaOoAnWfMmBPL+XNnynZh2+swxiX3WUE0s4yEHI6m+AwrK2UZOimIRl3X/4QctVqS8AiZjFqyOGrMXb/w==",
+			"license": "BSD-2-Clause",
+			"dependencies": {
+				"boolbase": "^1.0.0"
+			},
+			"funding": {
+				"url": "https://github.com/fb55/nth-check?sponsor=1"
+			}
+		},
 		"node_modules/nullthrows": {
 			"version": "1.1.1",
 			"resolved": "https://registry.npmjs.org/nullthrows/-/nullthrows-1.1.1.tgz",
@@ -10272,6 +10995,34 @@
 				"react-native": "*"
 			}
 		},
+		"node_modules/react-native-svg": {
+			"version": "15.12.1",
+			"resolved": "https://registry.npmjs.org/react-native-svg/-/react-native-svg-15.12.1.tgz",
+			"integrity": "sha512-vCuZJDf8a5aNC2dlMovEv4Z0jjEUET53lm/iILFnFewa15b4atjVxU6Wirm6O9y6dEsdjDZVD7Q3QM4T1wlI8g==",
+			"license": "MIT",
+			"dependencies": {
+				"css-select": "^5.1.0",
+				"css-tree": "^1.1.3",
+				"warn-once": "0.1.1"
+			},
+			"peerDependencies": {
+				"react": "*",
+				"react-native": "*"
+			}
+		},
+		"node_modules/react-native-view-shot": {
+			"version": "4.0.3",
+			"resolved": "https://registry.npmjs.org/react-native-view-shot/-/react-native-view-shot-4.0.3.tgz",
+			"integrity": "sha512-USNjYmED7C0me02c1DxKA0074Hw+y/nxo+xJKlffMvfUWWzL5ELh/TJA/pTnVqFurIrzthZDPtDM7aBFJuhrHQ==",
+			"license": "MIT",
+			"dependencies": {
+				"html2canvas": "^1.4.1"
+			},
+			"peerDependencies": {
+				"react": "*",
+				"react-native": "*"
+			}
+		},
 		"node_modules/react-native-web": {
 			"version": "0.21.1",
 			"resolved": "https://registry.npmjs.org/react-native-web/-/react-native-web-0.21.1.tgz",
@@ -11659,6 +12410,15 @@
 				"url": "https://github.com/sponsors/isaacs"
 			}
 		},
+		"node_modules/text-segmentation": {
+			"version": "1.0.3",
+			"resolved": "https://registry.npmjs.org/text-segmentation/-/text-segmentation-1.0.3.tgz",
+			"integrity": "sha512-iOiPUo/BGnZ6+54OsWxZidGCsdU8YbE4PSpdPinp7DeMtUJNJBoJ/ouUSTJjHkh1KntHaltHl/gDs2FC4i5+Nw==",
+			"license": "MIT",
+			"dependencies": {
+				"utrie": "^1.0.2"
+			}
+		},
 		"node_modules/thenify": {
 			"version": "3.3.1",
 			"resolved": "https://registry.npmjs.org/thenify/-/thenify-3.3.1.tgz",
@@ -11803,6 +12563,26 @@
 			"resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
 			"integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w=="
 		},
+		"node_modules/tsx": {
+			"version": "4.20.5",
+			"resolved": "https://registry.npmjs.org/tsx/-/tsx-4.20.5.tgz",
+			"integrity": "sha512-+wKjMNU9w/EaQayHXb7WA7ZaHY6hN8WgfvHNQ3t1PnU91/7O8TcTnIhCDYTZwnt8JsO9IBqZ30Ln1r7pPF52Aw==",
+			"dev": true,
+			"license": "MIT",
+			"dependencies": {
+				"esbuild": "~0.25.0",
+				"get-tsconfig": "^4.7.5"
+			},
+			"bin": {
+				"tsx": "dist/cli.mjs"
+			},
+			"engines": {
+				"node": ">=18.0.0"
+			},
+			"optionalDependencies": {
+				"fsevents": "~2.3.3"
+			}
+		},
 		"node_modules/type-check": {
 			"version": "0.4.0",
 			"resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
@@ -12166,6 +12946,15 @@
 				"node": ">= 0.4.0"
 			}
 		},
+		"node_modules/utrie": {
+			"version": "1.0.2",
+			"resolved": "https://registry.npmjs.org/utrie/-/utrie-1.0.2.tgz",
+			"integrity": "sha512-1MLa5ouZiOmQzUbjbu9VmjLzn1QLXBhwpUa7kdLUQK+KQ5KA9I1vk5U4YHe/X2Ch7PYnJfWuWT+VbuxbGwljhw==",
+			"license": "MIT",
+			"dependencies": {
+				"base64-arraybuffer": "^1.0.2"
+			}
+		},
 		"node_modules/uuid": {
 			"version": "13.0.0",
 			"resolved": "https://registry.npmjs.org/uuid/-/uuid-13.0.0.tgz",
diff --git a/dTAK/package.json b/dTAK/package.json
index 4b8384c4..dea2d22e 100644
--- a/dTAK/package.json
+++ b/dTAK/package.json
@@ -20,12 +20,16 @@
 		"@react-navigation/elements": "^2.6.3",
 		"@react-navigation/native": "^7.1.8",
 		"expo": "~54.0.7",
+		"expo-camera": "~17.0.8",
 		"expo-constants": "~18.0.8",
 		"expo-file-system": "^19.0.14",
 		"expo-font": "~14.0.8",
 		"expo-haptics": "~15.0.7",
 		"expo-image": "~3.0.8",
+		"expo-image-manipulator": "~14.0.7",
 		"expo-linking": "~8.0.8",
+		"expo-location": "~19.0.7",
+		"expo-media-library": "~18.2.0",
 		"expo-network": "~6.0.0",
 		"expo-router": "~6.0.4",
 		"expo-splash-screen": "~31.0.10",
@@ -43,6 +47,8 @@
 		"react-native-reanimated": "~4.1.0",
 		"react-native-safe-area-context": "~5.6.0",
 		"react-native-screens": "~4.16.0",
+		"react-native-svg": "15.12.1",
+		"react-native-view-shot": "4.0.3",
 		"react-native-web": "~0.21.0",
 		"react-native-worklets": "0.5.1",
 		"uuid": "^13.0.0"
@@ -51,7 +57,8 @@
 		"@types/react": "~19.1.0",
 		"eslint": "^9.25.0",
 		"eslint-config-expo": "~10.0.0",
+		"tsx": "^4.19.2",
 		"typescript": "~5.9.2"
 	},
 	"private": true
-}
+}
\ No newline at end of file
diff --git a/dTAK/src/features/camera/CameraSessionContext.tsx b/dTAK/src/features/camera/CameraSessionContext.tsx
new file mode 100644
index 00000000..c7ca133a
--- /dev/null
+++ b/dTAK/src/features/camera/CameraSessionContext.tsx
@@ -0,0 +1,93 @@
+import React, { createContext, useCallback, useContext, useMemo, useReducer } from "react";
+import { Annotation, CapturedPhoto } from "./types";
+
+type CameraSessionState = {
+  photo?: CapturedPhoto;
+  annotations: Annotation[];
+};
+
+type CameraSessionAction =
+  | { type: "set-photo"; payload?: CapturedPhoto }
+  | { type: "set-annotations"; payload: Annotation[] }
+  | { type: "add-annotation"; payload: Annotation }
+  | { type: "pop-annotation" }
+  | { type: "reset" };
+
+const initialState: CameraSessionState = { annotations: [] };
+
+const reducer = (state: CameraSessionState, action: CameraSessionAction): CameraSessionState => {
+  switch (action.type) {
+    case "set-photo":
+      return { photo: action.payload, annotations: [] };
+    case "set-annotations":
+      return { ...state, annotations: action.payload };
+    case "add-annotation":
+      return { ...state, annotations: [...state.annotations, action.payload] };
+    case "pop-annotation":
+      return { ...state, annotations: state.annotations.slice(0, -1) };
+    case "reset":
+      return initialState;
+    default:
+      return state;
+  }
+};
+
+type CameraSessionContextValue = {
+  capturedPhoto?: CapturedPhoto;
+  annotations: Annotation[];
+  setCapturedPhoto: (photo?: CapturedPhoto) => void;
+  setAnnotations: (annotations: Annotation[]) => void;
+  addAnnotation: (annotation: Annotation) => void;
+  undoLastAnnotation: () => void;
+  resetSession: () => void;
+};
+
+const CameraSessionContext = createContext<CameraSessionContextValue | undefined>(undefined);
+
+export const CameraSessionProvider: React.FC<React.PropsWithChildren> = ({ children }) => {
+  const [state, dispatch] = useReducer(reducer, initialState);
+
+  const setCapturedPhoto = useCallback((photo?: CapturedPhoto) => {
+    dispatch({ type: "set-photo", payload: photo });
+  }, []);
+
+  const setAnnotations = useCallback((annotations: Annotation[]) => {
+    dispatch({ type: "set-annotations", payload: annotations });
+  }, []);
+
+  const addAnnotation = useCallback((annotation: Annotation) => {
+    dispatch({ type: "add-annotation", payload: annotation });
+  }, []);
+
+  const undoLastAnnotation = useCallback(() => {
+    dispatch({ type: "pop-annotation" });
+  }, []);
+
+  const resetSession = useCallback(() => {
+    dispatch({ type: "reset" });
+  }, []);
+
+  const value = useMemo(
+    () => ({
+      capturedPhoto: state.photo,
+      annotations: state.annotations,
+      setCapturedPhoto,
+      setAnnotations,
+      addAnnotation,
+      undoLastAnnotation,
+      resetSession,
+    }),
+    [state.annotations, state.photo, addAnnotation, resetSession, setAnnotations, setCapturedPhoto]
+  );
+
+  return <CameraSessionContext.Provider value={value}>{children}</CameraSessionContext.Provider>;
+};
+
+export const useCameraSession = (): CameraSessionContextValue => {
+  const context = useContext(CameraSessionContext);
+  if (!context) {
+    throw new Error("useCameraSession must be used within a CameraSessionProvider");
+  }
+
+  return context;
+};
diff --git a/dTAK/src/features/camera/annotationUtils.ts b/dTAK/src/features/camera/annotationUtils.ts
new file mode 100644
index 00000000..5522a0d8
--- /dev/null
+++ b/dTAK/src/features/camera/annotationUtils.ts
@@ -0,0 +1,41 @@
+import { NormalizedPoint } from "./types";
+
+type Size = { width: number; height: number };
+
+const clampUnit = (value: number): number => {
+  if (Number.isNaN(value) || !Number.isFinite(value)) {
+    return 0;
+  }
+
+  if (value < 0) {
+    return 0;
+  }
+
+  if (value > 1) {
+    return 1;
+  }
+
+  return value;
+};
+
+export const normalizePoint = (point: { x: number; y: number }, size: Size): NormalizedPoint => {
+  if (size.width <= 0 || size.height <= 0) {
+    return { x: 0, y: 0 };
+  }
+
+  return {
+    x: clampUnit(point.x / size.width),
+    y: clampUnit(point.y / size.height),
+  };
+};
+
+export const denormalizePoint = (point: NormalizedPoint, size: Size): { x: number; y: number } => {
+  return {
+    x: point.x * size.width,
+    y: point.y * size.height,
+  };
+};
+
+export const distanceBetween = (a: NormalizedPoint, b: NormalizedPoint): number => {
+  return Math.hypot(b.x - a.x, b.y - a.y);
+};
diff --git a/dTAK/src/features/camera/types.ts b/dTAK/src/features/camera/types.ts
new file mode 100644
index 00000000..9a5cc822
--- /dev/null
+++ b/dTAK/src/features/camera/types.ts
@@ -0,0 +1,46 @@
+export type NormalizedPoint = {
+  x: number;
+  y: number;
+};
+
+export type CircleAnnotation = {
+  id: string;
+  type: "circle";
+  center: NormalizedPoint;
+  edge: NormalizedPoint;
+  color: string;
+};
+
+export type ArrowAnnotation = {
+  id: string;
+  type: "arrow";
+  start: NormalizedPoint;
+  end: NormalizedPoint;
+  color: string;
+};
+
+export type TextAnnotation = {
+  id: string;
+  type: "text";
+  point: NormalizedPoint;
+  text: string;
+  color: string;
+};
+
+export type Annotation = CircleAnnotation | ArrowAnnotation | TextAnnotation;
+
+export type GeoLocation = {
+  latitude: number;
+  longitude: number;
+  accuracy?: number;
+  timestamp: number;
+};
+
+export type CapturedPhoto = {
+  id: string;
+  uri: string;
+  width: number;
+  height: number;
+  exif?: Record<string, unknown>;
+  geolocation?: GeoLocation;
+};
diff --git a/dTAK/tests/annotationUtils.test.ts b/dTAK/tests/annotationUtils.test.ts
new file mode 100644
index 00000000..f30cb53b
--- /dev/null
+++ b/dTAK/tests/annotationUtils.test.ts
@@ -0,0 +1,34 @@
+import test from "node:test";
+import assert from "node:assert/strict";
+
+import { denormalizePoint, normalizePoint, distanceBetween } from "../src/features/camera/annotationUtils";
+
+const canvas = { width: 400, height: 200 };
+
+test("normalizePoint converts coordinates into unit space", () => {
+  const normalized = normalizePoint({ x: 100, y: 50 }, canvas);
+  assert.equal(normalized.x, 0.25);
+  assert.equal(normalized.y, 0.25);
+});
+
+test("normalizePoint clamps negative or overflow coordinates", () => {
+  const min = normalizePoint({ x: -10, y: -20 }, canvas);
+  assert.equal(min.x, 0);
+  assert.equal(min.y, 0);
+
+  const max = normalizePoint({ x: 500, y: 600 }, canvas);
+  assert.equal(max.x, 1);
+  assert.equal(max.y, 1);
+});
+
+test("denormalizePoint converts unit space back into pixels", () => {
+  const point = denormalizePoint({ x: 0.25, y: 0.5 }, canvas);
+  assert.equal(point.x, 100);
+  assert.equal(point.y, 100);
+});
+
+test("distanceBetween returns Euclidean distance in unit coordinates", () => {
+  const origin = { x: 0, y: 0 } as const;
+  const other = { x: 0.6, y: 0.8 } as const;
+  assert.equal(distanceBetween(origin, other), 1);
+});
diff --git a/docs/feature_notes/TP-2-camera.md b/docs/feature_notes/TP-2-camera.md
new file mode 100644
index 00000000..1416e57e
--- /dev/null
+++ b/docs/feature_notes/TP-2-camera.md
@@ -0,0 +1,18 @@
+# TP-2 – Camera Capture and Annotation
+
+## Summary
+- Added a dedicated capture → preview → edit flow under `/camera` to let users snap photos, review, and annotate.
+- Stored capture state (photo, geo metadata, annotations) in a context so navigation resets cleanly and edit tools share data.
+- Annotated images are flattened and optionally resized before saving to the device library, preserving geo-tag metadata separately for mission payloads.
+
+## Key Decisions
+- **Expo Camera stack:** used `expo-camera`/`CameraView` for capture to stay inside managed workflow and avoid native modules.
+- **State container:** lightweight context instead of global store while feature remains isolated; promotes future reuse in reports/missions.
+- **Annotation model:** normalised points keep shapes accurate regardless of render size; edit screen enforces original aspect ratio to avoid skew.
+- **Image export:** wrapped editor with `react-native-view-shot` and `expo-image-manipulator` to produce shareable assets ≤1600px width, balancing fidelity with Ditto mesh constraints.
+
+## Follow-ups / Open Questions
+1. Determine how annotated output and raw photo should sync to Ditto/TAK (format, queueing, metadata payload).
+2. Expand annotation toolset (freehand, color palette, measurement overlays) once UX flows are defined.
+3. Consider offline permission rationale messaging so operators understand why location/media access is requested.
+4. Add integration tests once an e2e harness exists; currently only pure helpers have automated coverage.
diff --git a/docs/pr-diffs/tp-4-diff.txt b/docs/pr-diffs/tp-4-diff.txt
new file mode 100644
index 00000000..e69de29b
diff --git a/package-lock.json b/package-lock.json
new file mode 100644
index 00000000..3474d421
--- /dev/null
+++ b/package-lock.json
@@ -0,0 +1,6 @@
+{
+  "name": "DTAK-UI-MAPS",
+  "lockfileVersion": 3,
+  "requires": true,
+  "packages": {}
+}